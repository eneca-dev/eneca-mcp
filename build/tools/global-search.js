/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
 */
import { DatabaseService } from '../services/database.js';

const dbService = new DatabaseService();

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –°–û–¢–†–£–î–ù–ò–ö–û–í =====
export const searchEmployeeFullInfoTool = {
    name: "search_employee_full_info",
    description: "–ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö, —Ä–∞–∑–¥–µ–ª–∞—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–µ",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)"
            },
            include_inactive: {
                type: "boolean",
                description: "–í–∫–ª—é—á–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                default: false
            }
        },
        required: ["query"]
    }
};

export async function handleSearchEmployeeFullInfo(args) {
    try {
        const query = String(args.query).trim();
        const includeInactive = args.include_inactive || false;
        
        // –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        const users = await dbService.searchUsersByQuery(query);
        
        if (users.length === 0) {
            return {
                content: [{
                    type: "text",
                    text: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`
                }]
            };
        }

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        if (users.length > 1) {
            const usersList = users.map((user, index) => 
                `${index + 1}. **${user.full_name?.trim() || `${user.first_name} ${user.last_name}`.trim()}** (${user.email})`
            ).join('\n');
            
            return {
                content: [{
                    type: "text",
                    text: `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n\n${usersList}\n\n–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`
                }]
            };
        }

        const user = users[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        const [workloads, projectsAsManager, projectsAsLeadEngineer] = await Promise.all([
            dbService.getUserActiveWorkloads(user.user_id),
            dbService.getProjectsByManager(user.user_id),
            dbService.getProjectsByLeadEngineer(user.user_id)
        ]);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        let report = `# üë§ **${user.full_name?.trim() || `${user.first_name} ${user.last_name}`.trim()}**\n\n`;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report += `## üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n`;
        report += `‚Ä¢ **Email:** ${user.email}\n`;
        report += `‚Ä¢ **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${user.position_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        report += `‚Ä¢ **–û—Ç–¥–µ–ª:** ${user.department_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        report += `‚Ä¢ **–ö–æ–º–∞–Ω–¥–∞:** ${user.team_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        report += `‚Ä¢ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${user.category_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        report += `‚Ä¢ **–°—Ç–∞–≤–∫–∞:** ${user.employment_rate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        if (user.work_format) {
            report += `‚Ä¢ **–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:** ${user.work_format}\n`;
        }
        report += `\n`;

        // –ü—Ä–æ–µ–∫—Ç—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä
        if (projectsAsManager && projectsAsManager.length > 0) {
            report += `## üéØ –ü—Ä–æ–µ–∫—Ç—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä (${projectsAsManager.length})\n`;
            projectsAsManager.forEach((project, index) => {
                report += `${index + 1}. **${project.project_name}**\n`;
                report += `   –°—Ç–∞—Ç—É—Å: ${dbService.getDisplayStatus(project.project_status || 'active')}\n`;
                if (project.project_description) {
                    report += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${project.project_description}\n`;
                }
                report += `\n`;
            });
        }

        // –ü—Ä–æ–µ–∫—Ç—ã –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä
        if (projectsAsLeadEngineer && projectsAsLeadEngineer.length > 0) {
            report += `## üîß –ü—Ä–æ–µ–∫—Ç—ã –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä (${projectsAsLeadEngineer.length})\n`;
            projectsAsLeadEngineer.forEach((project, index) => {
                report += `${index + 1}. **${project.project_name}**\n`;
                report += `   –°—Ç–∞—Ç—É—Å: ${dbService.getDisplayStatus(project.project_status || 'active')}\n`;
                if (project.project_description) {
                    report += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${project.project_description}\n`;
                }
                report += `\n`;
            });
        }

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
        if (workloads && workloads.length > 0) {
            report += `## üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ (${workloads.length})\n`;
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            const projectGroups = workloads.reduce((groups, workload) => {
                const projectName = workload.project_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç';
                if (!groups[projectName]) {
                    groups[projectName] = [];
                }
                groups[projectName].push(workload);
                return groups;
            }, {});

            Object.entries(projectGroups).forEach(([projectName, projectWorkloads]) => {
                report += `### üéØ **${projectName}**\n`;
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
                const objectGroups = projectWorkloads.reduce((groups, workload) => {
                    const objectName = workload.object_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç';
                    if (!groups[objectName]) {
                        groups[objectName] = [];
                    }
                    groups[objectName].push(workload);
                    return groups;
                }, {});

                Object.entries(objectGroups).forEach(([objectName, objectWorkloads]) => {
                    report += `#### üì¶ ${objectName}\n`;
                    objectWorkloads.forEach((workload) => {
                        if (workload.section_name) {
                            report += `‚Ä¢ **${workload.section_name}**`;
                            if (workload.loading_rate && workload.loading_rate !== '0') {
                                report += ` - –∑–∞–≥—Ä—É–∑–∫–∞: ${workload.loading_rate}%`;
                            }
                            if (workload.section_type) {
                                report += ` (${workload.section_type})`;
                            }
                            report += `\n`;
                            // –î–µ–¥–ª–∞–π–Ω—ã –ø–æ —Ä–∞–∑–¥–µ–ª—É
                            if (workload.section_end_date) {
                                report += `   –î–µ–¥–ª–∞–π–Ω —Ä–∞–∑–¥–µ–ª–∞: ${new Date(workload.section_end_date).toLocaleDateString()}\n`;
                            }
                            // –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—è –≤–æ view)
                            const decompDeadline = workload.loading_deadline || workload.loading_end_date || workload.due_date || workload.decomposition_deadline;
                            if (decompDeadline) {
                                const decompName = workload.loading_name || workload.decomposition_name || workload.task_name || null;
                                report += `   –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è${decompName ? ` (${decompName})` : ''}: –¥–µ–¥–ª–∞–π–Ω ${new Date(decompDeadline).toLocaleDateString()}\n`;
                            }
                        }
                    });
                });
                report += `\n`;
            });
        } else {
            report += `## üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n`;
            report += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n`;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalProjects = (projectsAsManager?.length || 0) + (projectsAsLeadEngineer?.length || 0);
        const totalSections = workloads?.length || 0;
        
        report += `## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
        report += `‚Ä¢ **–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:** ${totalProjects}\n`;
        report += `‚Ä¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤:** ${totalSections}\n`;
        report += `‚Ä¢ **–û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:** ${workloads?.reduce((sum, w) => sum + (parseFloat(w.loading_rate) || 0), 0).toFixed(1)}%\n`;

        return {
            content: [{
                type: "text",
                text: report
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: "text",
                text: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${error}`
            }]
        };
    }
}

// ===== –ü–û–ò–°–ö –ü–û –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–ú–£ =====
export const searchByResponsibleTool = {
    name: "search_by_responsible",
    description: "–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–æ–≤) –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
    inputSchema: {
        type: "object",
        properties: {
            responsible_name: {
                type: "string",
                description: "–ò–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
            },
            project_name: {
                type: "string",
                description: "–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            },
            limit: {
                type: "number",
                description: "–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                default: 20
            }
        },
        required: ["responsible_name"]
    }
};

export async function handleSearchByResponsible(args) {
    try {
        const responsibleName = String(args.responsible_name).trim();
        const projectName = args.project_name ? String(args.project_name).trim() : null;
        const limit = args.limit || 20;

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const users = await dbService.searchUsersByQuery(responsibleName);
        if (users.length === 0) {
            return {
                content: [{
                    type: "text",
                    text: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º "${responsibleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
                }]
            };
        }

        if (users.length > 1) {
            const usersList = users.map(u => `‚Ä¢ ${u.full_name?.trim() || `${u.first_name} ${u.last_name}`.trim()} (${u.email})`).join('\n');
            return {
                content: [{
                    type: "text",
                    text: `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏–º–µ–Ω–µ–º "${responsibleName}":\n${usersList}\n–£—Ç–æ—á–Ω–∏—Ç–µ –∏–º—è.`
                }]
            };
        }

        const user = users[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const [objects, sections] = await Promise.all([
            dbService.getObjectsByResponsible(user.user_id, projectName, limit),
            dbService.getSectionsByResponsible(user.user_id, projectName, limit)
        ]);

        let report = `# üìã –ó–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: **${user.full_name?.trim() || `${user.first_name} ${user.last_name}`.trim()}**\n\n`;

        if (objects.length > 0) {
            report += `## üì¶ –û–±—ä–µ–∫—Ç—ã (${objects.length})\n`;
            objects.forEach((obj, index) => {
                report += `${index + 1}. **${obj.object_name}**\n`;
                report += `   –ü—Ä–æ–µ–∫—Ç: ${obj.project_name}\n`;
                report += `   –°—Ç–∞–¥–∏—è: ${obj.stage_name}\n`;
                if (obj.object_description) {
                    report += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${obj.object_description}\n`;
                }
                if (obj.object_start_date) {
                    report += `   –ù–∞—á–∞–ª–æ: ${new Date(obj.object_start_date).toLocaleDateString()}\n`;
                }
                if (obj.object_end_date) {
                    report += `   –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(obj.object_end_date).toLocaleDateString()}\n`;
                }
                report += `\n`;
            });
        }

        if (sections.length > 0) {
            report += `## üìÑ –†–∞–∑–¥–µ–ª—ã (${sections.length})\n`;
            sections.forEach((section, index) => {
                report += `${index + 1}. **${section.section_name}**\n`;
                report += `   –ü—Ä–æ–µ–∫—Ç: ${section.project_name}\n`;
                report += `   –û–±—ä–µ–∫—Ç: ${section.object_name}\n`;
                if (section.section_type) {
                    report += `   –¢–∏–ø: ${section.section_type}\n`;
                }
                if (section.section_description) {
                    report += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${section.section_description}\n`;
                }
                if (section.section_start_date) {
                    report += `   –ù–∞—á–∞–ª–æ: ${new Date(section.section_start_date).toLocaleDateString()}\n`;
                }
                if (section.section_end_date) {
                    report += `   –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(section.section_end_date).toLocaleDateString()}\n`;
                }
                report += `\n`;
            });
        }

        if (objects.length === 0 && sections.length === 0) {
            report += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —É –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n`;
        }

        return {
            content: [{
                type: "text",
                text: report
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: "text",
                text: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: ${error}`
            }]
        };
    }
}

// ===== –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
export const searchUsersTool = {
    name: "search_users",
    description: "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ email)"
            },
            limit: {
                type: "number",
                description: "–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                default: 10
            }
        },
        required: ["query"]
    }
};

export async function handleSearchUsers(args) {
    try {
        const query = String(args.query).trim();
        const users = await dbService.searchUsersByQuery(query);
        if (users.length === 0) {
            return {
                content: [{
                    type: "text",
                    text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`
                }]
            };
        }
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const usersWithWorkloads = await Promise.all(users.map(async (user) => {
            const workloads = await dbService.getUserActiveWorkloads(user.user_id);
            return { ...user, workloads };
        }));
        
        const usersText = usersWithWorkloads.map((user, index) => {
            let text = `${index + 1}. **${user.full_name?.trim() || `${user.first_name} ${user.last_name}`.trim()}**\n`;
            text += `   Email: ${user.email}\n`;
            text += `   –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${user.position_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            text += `   –û—Ç–¥–µ–ª: ${user.department_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
            text += `   –ö–æ–º–∞–Ω–¥–∞: ${user.team_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            text += `   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${user.category_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            text += `   –°—Ç–∞–≤–∫–∞: ${user.employment_rate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            if (user.work_format) {
                text += `   –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: ${user.work_format}\n`;
            }
            if (user.workloads && user.workloads.length > 0) {
                text += `   **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—ã:**\n`;
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
                const projectGroups = user.workloads.reduce((groups, workload) => {
                    const projectName = workload.project_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç';
                    if (!groups[projectName]) {
                        groups[projectName] = [];
                    }
                    groups[projectName].push(workload);
                    return groups;
                }, {});
                Object.entries(projectGroups).forEach(([projectName, workloads]) => {
                    text += `     ‚Ä¢ **${projectName}**\n`;
                    workloads.forEach((workload) => {
                        if (workload.section_name) {
                            text += `       - ${workload.section_name}`;
                            if (workload.object_name) {
                                text += ` (${workload.object_name})`;
                            }
                            if (workload.loading_rate && workload.loading_rate !== '0') {
                                text += ` - –∑–∞–≥—Ä—É–∑–∫–∞: ${workload.loading_rate}%`;
                            }
                            text += `\n`;
                        }
                    });
                });
            } else {
                text += `   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: –Ω–µ—Ç\n`;
            }
            return text;
        }).join('\n');
        
        return {
            content: [{
                type: "text",
                text: `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n\n${usersText}`
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: "text",
                text: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error}`
            }]
        };
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –°–û–¢–†–£–î–ù–ò–ö–ê =====
export const getEmployeeWorkloadTool = {
    name: "get_employee_workload",
    description: "–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –∑–∞–¥–∞—á–∞–º",
    inputSchema: {
        type: "object",
        properties: {
            employee_name: {
                type: "string",
                description: "–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            },
            project_name: {
                type: "string",
                description: "–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            },
            include_completed: {
                type: "boolean",
                description: "–í–∫–ª—é—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                default: false
            }
        },
        required: ["employee_name"]
    }
};

export async function handleGetEmployeeWorkload(args) {
    try {
        const employeeName = String(args.employee_name).trim();
        const projectName = args.project_name ? String(args.project_name).trim() : null;
        const includeCompleted = args.include_completed || false;

        // –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const users = await dbService.searchUsersByQuery(employeeName);
        if (users.length === 0) {
            return {
                content: [{
                    type: "text",
                    text: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º "${employeeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
                }]
            };
        }

        if (users.length > 1) {
            const usersList = users.map(u => `‚Ä¢ ${u.full_name?.trim() || `${u.first_name} ${u.last_name}`.trim()} (${u.email})`).join('\n');
            return {
                content: [{
                    type: "text",
                    text: `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏–º–µ–Ω–µ–º "${employeeName}":\n${usersList}\n–£—Ç–æ—á–Ω–∏—Ç–µ –∏–º—è.`
                }]
            };
        }

        const user = users[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        const workloadData = await dbService.getEmployeeDetailedWorkload(user.user_id, projectName, includeCompleted);
        
        let report = `# üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: **${user.full_name?.trim() || `${user.first_name} ${user.last_name}`.trim()}**\n\n`;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report += `## üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ\n`;
        report += `‚Ä¢ **Email:** ${user.email}\n`;
        report += `‚Ä¢ **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${user.position_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        report += `‚Ä¢ **–û—Ç–¥–µ–ª:** ${user.department_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        report += `‚Ä¢ **–ö–æ–º–∞–Ω–¥–∞:** ${user.team_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        report += `‚Ä¢ **–°—Ç–∞–≤–∫–∞:** ${user.employment_rate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n`;

        if (workloadData.projects.length === 0) {
            report += `## üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n`;
            report += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n`;
            return {
                content: [{
                    type: "text",
                    text: report
                }]
            };
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalSections = workloadData.projects.reduce((sum, p) => sum + p.sections.length, 0);
        const totalWorkload = workloadData.projects.reduce((sum, p) => 
            sum + p.sections.reduce((sSum, s) => sSum + (parseFloat(s.loading_rate) || 0), 0), 0
        );

        report += `## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
        report += `‚Ä¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:** ${workloadData.projects.length}\n`;
        report += `‚Ä¢ **–í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤:** ${totalSections}\n`;
        report += `‚Ä¢ **–û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:** ${totalWorkload.toFixed(1)}%\n\n`;

        // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        report += `## üéØ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n\n`;
        
        workloadData.projects.forEach((project, index) => {
            report += `### ${index + 1}. **${project.project_name}**\n`;
            report += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${dbService.getDisplayStatus(project.project_status || 'active')}\n`;
            
            if (project.sections.length === 0) {
                report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: –Ω–µ—Ç\n\n`;
                return;
            }

            report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: ${project.sections.length}\n`;
            report += `‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É: ${project.sections.reduce((sum, s) => sum + (parseFloat(s.loading_rate) || 0), 0).toFixed(1)}%\n\n`;

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
            const objectGroups = project.sections.reduce((groups, section) => {
                const objectName = section.object_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç';
                if (!groups[objectName]) {
                    groups[objectName] = [];
                }
                groups[objectName].push(section);
                return groups;
            }, {});

            Object.entries(objectGroups).forEach(([objectName, sections]) => {
                report += `#### üì¶ ${objectName}\n`;
                sections.forEach(section => {
                    report += `‚Ä¢ **${section.section_name}**`;
                    if (section.section_type) {
                        report += ` (${section.section_type})`;
                    }
                    if (section.loading_rate && section.loading_rate !== '0') {
                        report += ` - –∑–∞–≥—Ä—É–∑–∫–∞: ${section.loading_rate}%`;
                    }
                    if (section.section_start_date) {
                        report += `\n  –ù–∞—á–∞–ª–æ: ${new Date(section.section_start_date).toLocaleDateString()}`;
                    }
                    if (section.section_end_date) {
                        report += `\n  –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(section.section_end_date).toLocaleDateString()}`;
                    }
                    report += `\n`;
                });
            });
            report += `\n`;
        });

        return {
            content: [{
                type: "text",
                text: report
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: "text",
                text: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${error}`
            }]
        };
    }
}

// ===== –ö–û–ú–ê–ù–î–ê –ü–†–û–ï–ö–¢–ê =====
export const getProjectTeamTool = {
    name: "get_project_team",
    description: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
    inputSchema: {
        type: "object",
        properties: {
            project_name: {
                type: "string",
                description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
            }
        },
        required: ["project_name"]
    }
};

export async function handleGetProjectTeam(args) {
    try {
        const projectName = String(args.project_name).trim();
        
        // –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await dbService.findProjectByNameExact(projectName);
        if (!project) {
            return {
                content: [{
                    type: "text",
                    text: `–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
                }]
            };
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–µ–∫—Ç–∞
        const teamMembers = await dbService.getProjectTeam(project.project_id);
        
        let report = `# üë• –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞: **${project.project_name}**\n\n`;
        
        if (teamMembers.length === 0) {
            report += `–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.\n`;
            return {
                content: [{
                    type: "text",
                    text: report
                }]
            };
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        const roles = {
            manager: [],
            leadEngineer: [],
            responsible: []
        };

        teamMembers.forEach(member => {
            if (member.role === 'manager') {
                roles.manager.push(member);
            } else if (member.role === 'lead_engineer') {
                roles.leadEngineer.push(member);
            } else if (member.role === 'responsible') {
                roles.responsible.push(member);
            }
        });

        if (roles.manager.length > 0) {
            report += `## üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞\n`;
            roles.manager.forEach(member => {
                report += `‚Ä¢ **${member.full_name || `${member.first_name} ${member.last_name}`}** (${member.email})\n`;
                if (member.position_name) {
                    report += `  –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${member.position_name}\n`;
                }
            });
            report += `\n`;
        }

        if (roles.leadEngineer.length > 0) {
            report += `## üîß –ì–ª–∞–≤–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã\n`;
            roles.leadEngineer.forEach(member => {
                report += `‚Ä¢ **${member.full_name || `${member.first_name} ${member.last_name}`}** (${member.email})\n`;
                if (member.position_name) {
                    report += `  –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${member.position_name}\n`;
                }
            });
            report += `\n`;
        }

        if (roles.responsible.length > 0) {
            report += `## üë∑ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (${roles.responsible.length})\n`;
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
            const byDepartment = roles.responsible.reduce((groups, member) => {
                const dept = member.department_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
                if (!groups[dept]) groups[dept] = [];
                groups[dept].push(member);
                return groups;
            }, {});

            Object.entries(byDepartment).forEach(([department, members]) => {
                report += `### ${department}\n`;
                members.forEach(member => {
                    report += `‚Ä¢ **${member.full_name || `${member.first_name} ${member.last_name}`}** (${member.email})\n`;
                    if (member.position_name) {
                        report += `  –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${member.position_name}\n`;
                    }
                    if (member.task_count > 0) {
                        report += `  –ó–∞–¥–∞—á: ${member.task_count}\n`;
                    }
                });
            });
        }

        return {
            content: [{
                type: "text",
                text: report
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: "text",
                text: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞: ${error}`
            }]
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
// –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

// ===== –†–ê–ó–î–ï–õ–´ –ü–û –ú–ï–ù–ï–î–ñ–ï–†–£ –ò –ü–†–û–ï–ö–¢–£ =====
export const getProjectSectionsByManagerNameTool = {
    name: "get_project_sections_by_manager_name",
    description: "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã {section_id, section_responsible_email} (–∏–∑ view_project_tree)",
    inputSchema: {
        type: "object",
        properties: {
            project_name: {
                type: "string",
                description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
            }
        },
        required: ["project_name"]
    }
};

export async function handleGetProjectSectionsByManagerName(args) {
    try {
        const projectName = String(args.project_name || '').trim();

        if (!projectName) {
            return { content: [{ type: "text", text: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å project_name" }] };
        }

        const rows = await dbService.getProjectSectionsByProjectName(projectName);

        if (!rows || rows.length === 0) {
            return { content: [{ type: "text", text: `–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${projectName}"` }] };
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º)
        const items = rows.map(row => ({
            type: "object",
            data: {
                section_id: row.section_id || null,
                section_name: row.section_name || null,
                section_responsible_email: row.section_responsible_email || null
            }
        }));

        return { content: items };
    } catch (error) {
        return { content: [{ type: "text", text: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ${error}` }] };
    }
}

// ===== –°–û–ó–î–ê–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò (NOTION) =====
export const createNotionTool = {
    name: "create_notion",
    description: "–°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ notions (notion_created_by: uuid, notion_content: text)",
    inputSchema: {
        type: "object",
        properties: {
            notion_created_by: {
                type: "string",
                description: "UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–º–µ—Ç–∫—É"
            },
            notion_content: {
                type: "string",
                description: "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (output –º–æ–¥–µ–ª–∏)"
            }
        },
        required: ["notion_created_by", "notion_content"]
    }
};

export async function handleCreateNotion(args) {
    try {
        const notionCreatedBy = String(args.notion_created_by || '').trim();
        const notionContent = String(args.notion_content || '').trim();

        const result = await dbService.createNotion(notionCreatedBy, notionContent);
        if (!result.success) {
            return { content: [{ type: "text", text: result.message }] };
        }
        const row = result.data;
        let text = `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: ${row?.notion_id || '‚Äî'})\n`;
        text += `–ê–≤—Ç–æ—Ä: ${row?.notion_created_by || notionCreatedBy}\n`;
        return { content: [{ type: "text", text }] };
    } catch (error) {
        return { content: [{ type: "text", text: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${error}` }] };
    }
}

// ===== –ò—Ç–æ–≥–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ =====
export const globalSearchTools = [
    searchEmployeeFullInfoTool,
    searchByResponsibleTool,
    searchUsersTool,
    getEmployeeWorkloadTool,
    getProjectTeamTool,
    getProjectSectionsByManagerNameTool,
    createNotionTool
];

export const globalSearchHandlers = {
    search_employee_full_info: handleSearchEmployeeFullInfo,
    search_by_responsible: handleSearchByResponsible,
    search_users: handleSearchUsers,
    get_employee_workload: handleGetEmployeeWorkload,
    get_project_team: handleGetProjectTeam,
    get_project_sections_by_manager_name: handleGetProjectSectionsByManagerName,
    create_notion: handleCreateNotion
};

