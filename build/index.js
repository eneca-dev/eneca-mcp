#!/usr/bin/env node
import { createMcpServer } from './mcp-server.js';
console.log('üöÄ –ó–∞–ø—É—Å–∫ Eneca MCP Server –¥–ª—è n8n...');
console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîß Platform: ${process.platform}`);
console.log(`üì¶ Node.js: ${process.version}`);
// Rate Limiting - 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ —Å–µ—Å—Å–∏—é
const rateLimiter = new Map();
function checkRateLimit(sessionId) {
    const now = Date.now();
    const requests = rateLimiter.get(sessionId) || [];
    const recent = requests.filter(time => now - time < 60000); // 1 –º–∏–Ω—É—Ç–∞
    if (recent.length >= 1000) {
        console.log(`Rate limit exceeded for session: ${sessionId}`);
        return false; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    }
    recent.push(now);
    rateLimiter.set(sessionId, recent);
    return true;
}
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const transportArg = args.find(arg => arg.startsWith('--transport='));
const transport = transportArg ? transportArg.split('=')[1] : 'stdio';
if (transport === 'sse') {
    console.log('–ó–∞–ø—É—Å–∫ SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è n8n...');
    try {
        const { SSEServerTransport } = await import('@modelcontextprotocol/sdk/server/sse.js');
        const http = await import('node:http');
        const { URL } = await import('node:url');
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        const activeTransports = new Map();
        // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        const httpServer = http.createServer(async (req, res) => {
            // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è n8n
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Mcp-Session-Id');
            if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
            }
            // –ü–∞—Ä—Å–∏–º URL
            const url = new URL(req.url, `http://${req.headers.host}`);
            // GET /sse - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (req.method === 'GET' && url.pathname === '/sse') {
                console.log('GET /sse - –ù–æ–≤–æ–µ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç n8n');
                try {
                    // –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    const server = createMcpServer();
                    // –°–æ–∑–¥–∞–µ–º SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    const sseTransport = new SSEServerTransport('/sse', res);
                    const sessionId = sseTransport.sessionId;
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
                    activeTransports.set(sessionId, sseTransport);
                    console.log(`–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${sessionId}`);
                    // Cleanup –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ onclose –≤—ã—à–µ
                    // –ü–æ–¥–∫–ª—é—á–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                    await server.connect(sseTransport);
                    console.log('SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keep-alive ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤ Heroku
                    const keepAliveInterval = setInterval(() => {
                        if (res.writableEnded || res.destroyed) {
                            clearInterval(keepAliveInterval);
                            return;
                        }
                        
                        try {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                            res.write(`: keepalive ${Date.now()}\n\n`);
                            console.log('üíì Keep-alive ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                        } catch (error) {
                            console.log('‚ùå –û—à–∏–±–∫–∞ keep-alive ping:', error.message);
                            clearInterval(keepAliveInterval);
                        }
                    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
                    
                    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    sseTransport.onclose = () => {
                        console.log(`SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${sessionId}`);
                        clearInterval(keepAliveInterval);
                        activeTransports.delete(sessionId);
                    };
                }
                catch (error) {
                    console.error('–û—à–∏–±–∫–∞ GET /sse:', error);
                    res.writeHead(500);
                    res.end('SSE Error');
                }
                return;
            }
            // POST /sse?sessionId=... - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MCP –∫–æ–º–∞–Ω–¥—ã
            if (req.method === 'POST' && url.pathname === '/sse') {
                console.log('POST /sse - MCP –∫–æ–º–∞–Ω–¥–∞ –æ—Ç n8n');
                // –ò–∑–≤–ª–µ–∫–∞–µ–º sessionId –∏–∑ URL
                const sessionId = url.searchParams.get('sessionId');
                console.log(`Session ID: ${sessionId}`);
                if (!sessionId) {
                    console.log(' –ù–µ—Ç sessionId –≤ URL');
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'sessionId required' }));
                    return;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
                if (!checkRateLimit(sessionId)) {
                    console.log(`Rate limit exceeded –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}`);
                    res.writeHead(429, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Rate limit exceeded: –º–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É' }));
                    return;
                }
                // –ò—â–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                const sseTransport = activeTransports.get(sessionId);
                if (!sseTransport) {
                    console.log(` –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: ${sessionId}`);
                    console.log(` –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: ${activeTransports.size}`);
                    res.writeHead(404, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Transport not found' }));
                    return;
                }
                try {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ SDK
                    console.log(' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MCP –∫–æ–º–∞–Ω–¥—É...');
                    await sseTransport.handlePostMessage(req, res);
                    console.log(' MCP –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
                }
                catch (error) {
                    console.error('–û—à–∏–±–∫–∞ POST –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
                    // SDK —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç
                }
                return;
            }
            // Health check –¥–ª—è Heroku
            if (req.method === 'GET' && url.pathname === '/') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({
                    status: 'ok',
                    service: 'eneca-mcp-server',
                    version: '2.0.0',
                    timestamp: new Date().toISOString(),
                    endpoints: {
                        sse: '/sse',
                        health: '/',
                        webhook: '/webhook'
                    }
                }));
                return;
            }
            
            // Webhook endpoint –¥–ª—è n8n
            if (req.method === 'POST' && url.pathname === '/webhook') {
                console.log('üì° POST /webhook - –í–µ–±—Ö—É–∫ –æ—Ç n8n');
                
                try {
                    let body = '';
                    req.on('data', chunk => {
                        body += chunk.toString();
                    });
                    
                    req.on('end', async () => {
                        try {
                            const webhookData = JSON.parse(body);
                            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:', JSON.stringify(webhookData, null, 2));
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSE –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                            const webhookMessage = {
                                type: 'webhook',
                                timestamp: new Date().toISOString(),
                                data: webhookData,
                                source: 'n8n'
                            };
                            
                            let clientsNotified = 0;
                            for (const [sessionId, transport] of activeTransports) {
                                try {
                                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SSE
                                    transport.sendMessage({
                                        type: 'webhook',
                                        data: webhookMessage
                                    });
                                    clientsNotified++;
                                    console.log(`üì§ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: ${sessionId}`);
                                } catch (error) {
                                    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –∫–ª–∏–µ–Ω—Ç—É ${sessionId}:`, error.message);
                                }
                            }
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                            res.writeHead(200, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify({
                                status: 'success',
                                message: 'Webhook –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                                clientsNotified,
                                timestamp: new Date().toISOString(),
                                data: webhookData
                            }));
                            
                            console.log(`‚úÖ –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsNotified}`);
                            
                        } catch (parseError) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤–µ–±—Ö—É–∫–∞:', parseError);
                            res.writeHead(400, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify({ 
                                error: 'Invalid JSON', 
                                message: parseError.message 
                            }));
                        }
                    });
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ 
                        error: 'Internal Server Error', 
                        message: error.message 
                    }));
                }
                return;
            }
            
            // 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            console.log(`404: ${req.method} ${url.pathname}${url.search}`);
            res.writeHead(404);
            res.end('Not Found');
        });
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Heroku)
        const port = process.env.PORT || 8080;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        httpServer.listen(port, () => {
            console.log(`üöÄ SSE —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            console.log(`üìç Endpoint: http://localhost:${port}/sse`);
            console.log(`üåê Heroku URL: https://${process.env.HEROKU_APP_NAME || 'your-app'}.herokuapp.com/sse`);
        });
        console.log('–ì–æ—Ç–æ–≤ for n8n MCP Client');
        console.log('–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ GET –∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤');
        // Graceful shutdown
        process.on('SIGINT', async () => {
            console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
            httpServer.close();
            process.exit(0);
        });
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SSE —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}
else {
    // STDIO —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    console.log('–ó–∞–ø—É—Å–∫ STDIO —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...');
    try {
        const { StdioServerTransport } = await import('@modelcontextprotocol/sdk/server/stdio.js');
        const server = createMcpServer();
        const stdioTransport = new StdioServerTransport();
        await server.connect(stdioTransport);
        console.log('STDIO —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤');
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ STDIO:', error);
        process.exit(1);
    }
}
